# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr'
    sso.annuaire.url: '%env(string:SSO_ANNUAIRE_URL)%'
    ignore.ssl.issues: '%env(string:IGNORE_SSL_ISSUES)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $tmpFolder: '%env(string:TMP_FOLDER)%'
            $baseTelaPhotoApiUrl: '%env(string:BASE_TELA_PHOTO_API_URL)%'
            $plantnetApiUrl: '%env(string:PLANTNET_API_URL)%'
            $plantnetApiKey: '%env(string:PLANTNET_API_KEY)%'
            $appPrefixPath: '%env(string:APP_PREFIX_PATH)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # ########################################################################
    # ARGUMENTS INJECTION
    # ########################################################################

    App\Elastica\Client\ElasticsearchClient:
        $elasticsearchUrl: '%env(string:ELASTICSEARCH_URL)%'
        $occurrencesIndexName: '%env(string:FOS_ELASTICA_INDEXES_OCCURRENCES_INDEX_NAME)%'
        $photosIndexName: '%env(string:FOS_ELASTICA_INDEXES_PHOTOS_INDEX_NAME)%'

    App\Service\ExportOccurrenceService:
        $exportServiceUrl: '%env(string:EXPORT_SERVICE_URL)%'

    App\Service\PhotoRotator:
        $urlMiniregen: '%env(string:URL_MINIREGEN)%'

    App\TelaBotanica\Eflore\Api\EfloreApiClient:
        $efloreBaseUrl: '%env(string:EFLORE_BASE_URL)%'

    # ########################################################################
    # ENTITY (DE)SERIALIZATION
    # ########################################################################

    # Encoder for GeoJSON format:
    'App\Serializer\GeoJsonOccurrenceNormalizer':
        arguments: [ '@api_platform.serializer.normalizer.item' ]
        tags: [ 'serializer.normalizer' ]

    # Serializer for GeoJSON format:
    app.serializer.geo_json_occurrence_encoder:
        class: App\Serializer\GeoJsonOccurrenceEncoder
        tags: [ 'serializer.encoder' ]

    # Encoder for JSON-PATCH format:
    'App\Serializer\JsonPatchOccurrenceNormalizer':
        arguments: [ '@api_platform.serializer.normalizer.item' ]
        tags: [ 'serializer.normalizer' ]

    # Serializer for JSON-PATCH format:
    app.serializer.json_patch_encoder:
        class: App\Serializer\JsonPatchOccurrenceEncoder
        tags: [ 'serializer.encoder' ]

    # Encoder for PDF format:
    'App\Serializer\PdfOccurrenceNormalizer':
        arguments: [ '@api_platform.serializer.normalizer.item' ]
        tags: [ 'serializer.normalizer' ]

    # Serializer for PDF format:
    app.serializer.pdf_occurrence_encoder:
        class: App\Serializer\PdfOccurrenceEncoder
        tags: [ 'serializer.encoder' ]

    # ########################################################################
    # ELASTICA ENTITY TO DOCUMENT TRANSFORMERS
    # ########################################################################
    # Services for transforming entities to elasticsearch documents 
    # ########################################################################
 
    # Occurrence resource type.
    app.search.occurrence_to_elastica_transformer :
        class: App\Elastica\Transformer\OccurrenceToElasticaTransformer

    # Photo resource type.
    app.search.photo_to_elastica_transformer :
        class: App\Elastica\Transformer\PhotoToElasticaTransformer

    # ########################################################################
    # DOCTRINE ENTITY EVENT LISTENERS
    # ########################################################################

    app.event.listener.occurrence.event.listener:
        class: App\EventListener\OccurrenceEventListener
        arguments: ['@security.token_storage']
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            - { name: doctrine.event_listener, event: preRemove }

    app.event.listener.photo.event.listener:
        class: App\EventListener\PhotoEventListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: postPersist }

    app.event.listener.owned.entity.event.listener:
        class: App\EventListener\OwnedEntityEventListener
        arguments: ['@security.token_storage']
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    app.event.listener.timestamped.entity.event.listener:
        class: App\EventListener\TimestampedEntityEventListener
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    app.event.listener.photo.photo.tag.relation.event.listener:
        class: App\EventListener\PhotoPhotoTagRelationEventListener
        arguments: ['@fos_elastica.object_persister.photos.photo']
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postRemove }

    app.event.listener.occurrence.user.occurrence.tag.relation.event.listener:
        class: App\EventListener\OccurrenceUserOccurrenceTagRelationEventListener
        arguments: ['@fos_elastica.object_persister.occurrences.occurrence']
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postRemove }

    # ########################################################################
    # RESPONSE EVENT LISTENERS
    # ########################################################################

    app.event.listener.xcount.response.listener:
        class: App\EventListener\XcountResponseListener
        tags:
           - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }

    # ########################################################################
    # VICH UPLOAD - PHOTO NAMER/PHOTO DIRECTORY_NAMER
    # ########################################################################

    vich_uploader.mappings.media_object.namer:
        class: App\Vich\TelaImageNamer
        public: true

    vich_uploader.mappings.media_object.directory_namer:
        class: App\Vich\TelaImageDirectoryNamer
        public: true

    # ########################################################################
    # COMMANDS
    # ########################################################################

    App\Command\SyncDocumentIndexCommand:
        tags:
            - { name: 'console.command', command: 'cel:sync-es' }


